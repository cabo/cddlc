#!/usr/bin/env ruby
require 'pp'
require 'yaml'
require 'treetop'
require 'json'

require_relative '../lib/cddlc.rb'

def named_keys(tree)
  # warn [:T, tree].inspect
  fail unless Array === tree
  case tree[0]
  when "seq", "gcho", "tcho"
    tree[1..-1].flat_map {|x| named_keys(x)}
  when "rep"
    named_keys(tree[3])
  when "mem"
    key = tree[2]
    if Array === key && key[0] == "name"
      [key[1]]
    end
  end || []
end

def integer_value(tree)
  tree and (
    fail tree.inspect unless Array === tree
    case tree[0]
    when "number"
      tree[1]
      # XXX: could add other cases
    end
  )
end

def snaky(name)
  name.gsub(/-/, "_")
end
 
Encoding.default_external = Encoding::UTF_8
require 'optparse'
require 'ostruct'

$options = OpenStruct.new
begin
  op = OptionParser.new do |opts|
    opts.banner = "Usage: cddlc.rb [options] [file.cddl... | -]"

    opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
      $options.verbose = v
    end
    opts.on("-r", "--[no-]rules", "Process rules") do |v|
      $options.rules = v
    end
    opts.on("-x", "--[no-]expand", "Expand generics") do |v|
      $options.expand_generics = v
    end
    opts.on("-f", "--[no-]flattening", "Flattening") do |v|
      $options.flattening = v
    end
    opts.on("-u", "--[no-]undefined", "Note undefined names") do |v|
      $options.note_undefined = v
    end
    opts.on("-2", "--[no-]cddl2", "Perform some CDDL 2.0 processing") do |v|
      $options.cddl2 = v
    end
    opts.on("-tFMT", "--to=FMT", [:basic, :neat, :json, :yaml, :enum, :cddl], "Target format") do |v|
      $options.target = v
    end
    opts.on("-sRULE", "--start=RULE", String, "Start rule name") do |v|
      $options.start = v
    end
    opts.on("-iIMPORT", "--import=IMPORT", String, "Import [namespace=]reference") do |v|
      $options.import ||= []
      $options.import << v
    end
    opts.on("-IINCLUDE", "--include=INCLUDE", String, "Include [namespace=]reference") do |v|
      $options.include ||= []
      $options.include << v
    end
  end
  op.parse!
rescue Exception => e
  warn e
  exit 1
end

if ($options.expand_generics || $options.flattening) && !$options.rules
  warn "** can't expand or flatten in tree; adding -r flag"
  $options.rules = true
end

cddl_file = ""
if $options.start
  cddl_file << "$.start.$ = #{$options.start}\n"
end

[[$options.include, "include"], [$options.import, "import"]].each do |arr, directive|
  if arr
    arr.each do |ref|
      asname, refname = ref.split("=", 2)
      unless refname
        refname = asname
        asname = nil
      end
      cddl_file << ";# #{directive} #{refname}"
      cddl_file << " as #{asname}" if asname
      cddl_file << "\n"
    end
  end
end

if $options.verbose
  warn "::: generated from options:"
  warn cddl_file
  warn ":::\n\n"
end

if ARGV == []
  if cddl_file == ""
    puts op
    exit 1
  end
else
  cddl_file << ARGF.read
end


cddl = CDDL.from_cddl(cddl_file)
result = if $options.rules
           if $options.expand_generics
             require_relative "../lib/processor/cddl-expander.rb"
             cddl.expand_generics
           end
           if $options.flattening
             require_relative "../lib/processor/cddl-flattening.rb"
             cddl.flattening
             warn "*** done flattening" if $options.verbose
           end
           cddl.rules
         else
           cddl.tree
         end

warn "** can't note undefined for target != cddl" if $options.note_undefined && $options.target != :cddl

case $options.target
when :basic, nil
  pp result
when :neat, :json
  require 'neatjson'
  puts JSON.neat_generate(result, after_comma: 1, after_colon: 1)
when :yaml
  puts result.to_yaml
when :enum
  rules = cddl.rules
  rules.each do |k, v|
    if v[0] == "map"
      nk = v[1..-1].flat_map {|e| named_keys(e)}
      # warn [:NK, k, nk].inspect
      nk = nk.map {|name| i = integer_value(rules[name]); [name, i] if i}.compact
      # warn [:NK, k, nk].inspect
      if nk != []
        puts "enum #{snaky(k).downcase}_keys {"
        nk.each do |n, v|
          puts "  #{snaky(n).upcase} = #{v},"
        end
        puts "};"
      end
    end
  end
when :cddl
  require_relative '../lib/writer/cddl-writer.rb'
  if $options.note_undefined
    require_relative '../lib/processor/cddl-undefined.rb'
    undef_rule = cddl.cddl_undefined
    undef_rule.each do |k|
      puts ";;; *** undefined: #{k}"
    end
  end
  puts cddl.to_s
else
  warn ["Unknown target format: ", $options.target].inspect
end

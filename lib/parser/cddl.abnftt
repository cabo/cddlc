cddl = S 1*(rule S) {
    def ast
      ["cddl", *elements[1].elements.map(&:r__rule).map(&:ast)]
    end
}
rule = typename [genericparm] S assignt S type {
    def ast
      [assignt.text_value, mkgen(typename, elements[1]), type.ast]
    end
}
     / groupname [genericparm] S assigng S grpent {
    def ast
      [assigng.text_value, mkgen(groupname, elements[1]), grpent.ast]
    end
}

typename = id
groupname = id

assignt = "=" / "/="
assigng = "=" / "//="

genericparm = "<" S id S *("," S id S ) ">" { def ast() [id.text_value, *elements[4].elements.map{|x| x.id.text_value}] end}
genericarg = "<" S type1 S *("," S type1 S ) ">"  { def ast() [type1.ast, *elements[4].elements.map{|x| x.type1.ast}] end}

type = type1 *(S "/" S type1) {
    def ast
      wrapop("tcho", type1, elements[1].elements.map(&:type1))
    end
}

type1 = type2 [S (rangeop / ctlop) S type2] {
    def ast
      a = type2.ast
      if el = elements[1].elements
        ["op", el[1].text_value, a, el[3].ast]
      else
        a
      end
    end
}
; space may be needed before the operator if type2 ends in a name

type2 = value
      / typename [genericarg] { def ast() mkgen(typename, elements[1]) end}
      / "(" S type S ")" {def ast() elements[2].ast end}
      / "{" S group S "}" { def ast() ["map", group.ast] end }
      / "[" S group S "]" { def ast() ["ary", group.ast] end }
      / "~" S typename [genericarg] { def ast () ["unwrap", mkgen(typename, elements[3])] end}
      / "&" S "(" S group S ")" { def ast() ["enum", group.ast] end}
      / "&" S groupname [genericarg] { def ast() ["enum", mkgen(groupname, elements[3])] end}
      / "#" "6" ["." uint] "(" S type S ")" { def ast
           el = elements[2].elements
           ["prim", 6, el && el[1].text_value.to_i, elements[5].ast]
         end }
      / "#" DIGIT ["." uint] { def ast
           ["prim", elements[1].text_value.to_i,
            *(el = elements[2].elements) ? [el[1].text_value.to_i] : []]
         end }               ; major/ai
      / "#"  {def ast() ["prim"] end}                               ; any

rangeop = "..." / ".."

ctlop = "." id

group = grpchoice *(S "//" S grpchoice) {
    def ast
      wrapop("gcho", grpchoice, elements[1].elements.map(&:grpchoice))
    end
}

grpchoice = *(grpent optcom) {
    def ast
      wrapop0("seq", elements.map(&:grpent)) #[0].elements)
    end
}

grpent = [occur S] [memberkey S] type { def ast() repwrap(elements[0], ["mem", elements[1].elements ? elements[1].memberkey.ast : nil, elements[2].ast]) end}
       / [occur S] groupname [genericarg]  ; preempted by above
       / [occur S] "(" S group S ")" { def ast() repwrap(elements[0], group.ast()) end}

memberkey = type1 S ["^" S] "=>" { def ast() type1.ast end}
          / bareword S ":" { def ast() ["text", bareword.text_value] end}
          / value S ":" { def ast() value.ast end}

bareword = id

optcom = S ["," S]

occur = [uint] "*" [uint] {def ast() [tvtoi(elements[0], 0), tvtoi(elements[2], Float::Infinity)] end}
      / "+" {def ast() [1, Float::Infinity] end}
      / "?" {def ast() [0, 1] end}

uint = DIGIT1 *DIGIT
     / "0x" 1*HEXDIG
     / "0b" 1*BINDIG
     / "0"

value = number { def ast() ["number", text_value] end}
      / text
      / bytes

int = ["-"] uint

; This is a float if it has fraction or exponent; int otherwise
number = hexfloat / (int ["." fraction] ["e" exponent ])
hexfloat = ["-"] "0x" 1*HEXDIG ["." 1*HEXDIG] "p" exponent
fraction = 1*DIGIT
exponent = ["+"/"-"] 1*DIGIT

text = %x22 *SCHAR %x22 { def ast() ["text", elements[1].elements.map(&:ast).join] end}
SCHAR = %x20-21 {def ast() text_value end
          }/ %x23-5B {def ast() text_value end
          }/ %x5D-7E {def ast() text_value end
          }/ %x80-10FFFD {def ast() text_value end
          }/ SESC
SESC = "\" (%x20-7E / %x80-10FFFD) {def ast() JSON.load("\"\\#{elements[1].text_value}\"") end}

bytes = [bsqual] %x27 *BCHAR %x27 { def ast() ["bytes", text_value] end}
BCHAR = %x20-26 / %x28-5B / %x5D-10FFFD / SESC / CRLF
bsqual = "h" / "b64"

id = EALPHA *(*("-" / ".") (EALPHA / DIGIT))
ALPHA = %x41-5A / %x61-7A
EALPHA = ALPHA / "@" / "_" / "$"
DIGIT = %x30-39
DIGIT1 = %x31-39
HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
BINDIG = %x30-31

S = *WS
WS = SP / NL
SP = %x20
NL = COMMENT / CRLF
COMMENT = ";" *PCHAR CRLF
PCHAR = %x20-7E / %x80-10FFFD
CRLF = %x0A / %x0D.0A

